"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const http = require("http");
const apollo_server_express_1 = require("apollo-server-express");
var apollo_server_core_1 = require("apollo-server-core");
exports.GraphQLExtension = apollo_server_core_1.GraphQLExtension;
exports.gql = apollo_server_core_1.gql;
__export(require("./exports"));
class ApolloServer extends apollo_server_express_1.ApolloServer {
    createServerInfo(server, subscriptionsPath) {
        const serverInfo = Object.assign({}, server.address(), { server,
            subscriptionsPath });
        let hostForUrl = serverInfo.address;
        if (serverInfo.address === '' || serverInfo.address === '::')
            hostForUrl = 'localhost';
        serverInfo.url = require('url').format({
            protocol: 'http',
            hostname: hostForUrl,
            port: serverInfo.port,
            pathname: this.graphqlPath,
        });
        return serverInfo;
    }
    listen(...opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const app = express();
            this.applyMiddleware({
                app,
                path: '/',
                bodyParserConfig: { limit: '50mb' },
                cors: {
                    origin: '*',
                },
            });
            this.httpServer = http.createServer(app);
            if (this.subscriptionServerOptions) {
                this.installSubscriptionHandlers(this.httpServer);
            }
            yield new Promise(resolve => {
                this.httpServer.once('listening', resolve);
                this.httpServer.listen(...(opts.length ? opts : [{ port: 4000 }]));
            });
            return this.createServerInfo(this.httpServer, this.subscriptionsPath);
        });
    }
    stop() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (this.httpServer) {
                yield new Promise(resolve => this.httpServer.close(resolve));
                this.httpServer = null;
            }
            yield _super("stop").call(this);
        });
    }
}
exports.ApolloServer = ApolloServer;
//# sourceMappingURL=index.js.map