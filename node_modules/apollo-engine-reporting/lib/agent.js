"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var zlib_1 = require("zlib");
var request = require("requestretry");
var apollo_engine_reporting_protobuf_1 = require("apollo-engine-reporting-protobuf");
var extension_1 = require("./extension");
// Override the generated protobuf Traces.encode function so that it will look
// for Traces that are already encoded to Buffer as well as unencoded
// Traces. This amortizes the protobuf encoding time over each generated Trace
// instead of bunching it all up at once at sendReport time. In load tests, this
// change improved p99 end-to-end HTTP response times by a factor of 11 without
// a casually noticeable effect on p50 times. This also makes it easier for us
// to implement maxUncompressedReportSize as we know the encoded size of traces
// as we go.
var originalTracesEncode = apollo_engine_reporting_protobuf_1.Traces.encode;
apollo_engine_reporting_protobuf_1.Traces.encode = function (message, originalWriter) {
    var writer = originalTracesEncode(message, originalWriter);
    var encodedTraces = message.encodedTraces;
    if (encodedTraces != null && encodedTraces.length) {
        for (var i = 0; i < encodedTraces.length; ++i) {
            writer.uint32(/* id 1, wireType 2 =*/ 10);
            writer.bytes(encodedTraces[i]);
        }
    }
    return writer;
};
var REPORT_HEADER = new apollo_engine_reporting_protobuf_1.ReportHeader({
    hostname: os.hostname(),
    // tslint:disable-next-line no-var-requires
    agentVersion: "apollo-engine-reporting@" + require('../package.json').version,
    runtimeVersion: "node " + process.version,
    // XXX not actually uname, but what node has easily.
    uname: os.platform() + ", " + os.type() + ", " + os.release() + ", " + os.arch() + ")",
});
// EngineReportingAgent is a persistent object which creates
// EngineReportingExtensions for each request and sends batches of trace reports
// to the Engine server.
var EngineReportingAgent = /** @class */ (function () {
    function EngineReportingAgent(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.options = options;
        this.apiKey = options.apiKey || process.env.ENGINE_API_KEY || '';
        if (!this.apiKey) {
            throw new Error('To use EngineReportingAgent, you must specify an API key via the apiKey option or the ENGINE_API_KEY environment variable.');
        }
        this.resetReport();
        this.reportTimer = setInterval(function () { return _this.sendReportAndReportErrors(); }, this.options.reportIntervalMs || 10 * 1000);
        if (this.options.handleSignals !== false) {
            var signals = ['SIGINT', 'SIGTERM'];
            signals.forEach(function (signal) {
                process.once(signal, function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.stop();
                                return [4 /*yield*/, this.sendReportAndReportErrors()];
                            case 1:
                                _a.sent();
                                process.kill(process.pid, signal);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        }
    }
    EngineReportingAgent.prototype.newExtension = function () {
        return new extension_1.EngineReportingExtension(this.options, this.addTrace.bind(this));
    };
    EngineReportingAgent.prototype.addTrace = function (signature, operationName, trace) {
        // Ignore traces that come in after stop().
        if (!this.reportTimer) {
            return;
        }
        var protobufError = apollo_engine_reporting_protobuf_1.Trace.verify(trace);
        if (protobufError) {
            throw new Error("Error encoding trace: " + protobufError);
        }
        var encodedTrace = apollo_engine_reporting_protobuf_1.Trace.encode(trace).finish();
        var statsReportKey = "# " + (operationName || '-') + "\n" + signature;
        if (!this.report.tracesPerQuery.hasOwnProperty(statsReportKey)) {
            this.report.tracesPerQuery[statsReportKey] = new apollo_engine_reporting_protobuf_1.Traces();
            this.report.tracesPerQuery[statsReportKey].encodedTraces = [];
        }
        // See comment on our override of Traces.encode to learn more about this
        // strategy.
        this.report.tracesPerQuery[statsReportKey].encodedTraces.push(encodedTrace);
        this.reportSize += encodedTrace.length + Buffer.byteLength(statsReportKey);
        // If the buffer gets big (according to our estimate), send.
        if (this.reportSize >=
            (this.options.maxUncompressedReportSize || 4 * 1024 * 1024)) {
            this.sendReportAndReportErrors();
        }
    };
    EngineReportingAgent.prototype.sendReport = function () {
        var _this = this;
        var report = this.report;
        this.resetReport();
        if (Object.keys(report.tracesPerQuery).length === 0) {
            return Promise.resolve();
        }
        // Send traces asynchronously, so that (eg) addTrace inside a resolver
        // doesn't block on it.
        return Promise.resolve()
            .then(function () {
            if (_this.options.debugPrintReports) {
                // tslint:disable-next-line no-console
                console.log("Engine sending report: " + JSON.stringify(report.toJSON()));
            }
            var protobufError = apollo_engine_reporting_protobuf_1.FullTracesReport.verify(report);
            if (protobufError) {
                throw new Error("Error encoding report: " + protobufError);
            }
            var message = apollo_engine_reporting_protobuf_1.FullTracesReport.encode(report).finish();
            return new Promise(function (resolve, reject) {
                // The protobuf library gives us a Uint8Array. Node 8's zlib lets us
                // pass it directly; convert for the sake of Node 6. (No support right
                // now for Node 4, which lacks Buffer.from.)
                var messageBuffer = Buffer.from(message.buffer, message.byteOffset, message.byteLength);
                zlib_1.gzip(messageBuffer, function (err, compressed) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(compressed);
                    }
                });
            });
        })
            .then(function (compressed) {
            // Grab this here because the delayStrategy function has a different 'this'.
            var minimumRetryDelayMs = _this.options.minimumRetryDelayMs || 100;
            // note: retryrequest has built-in Promise support, unlike the base 'request'.
            return request({
                url: (_this.options.endpointUrl ||
                    'https://engine-report.apollodata.com') + '/api/ingress/traces',
                method: 'POST',
                headers: {
                    'user-agent': 'apollo-engine-reporting',
                    'x-api-key': _this.apiKey,
                    'content-encoding': 'gzip',
                },
                body: compressed,
                // By default, retryrequest will retry on network errors and 5xx HTTP
                // responses.
                maxAttempts: _this.options.maxAttempts || 5,
                // Note: use a non-arrow function as this API gives us useful information
                // on 'this', and use an 'as any' because the type definitions don't know
                // about the function version of this parameter.
                delayStrategy: function () {
                    return minimumRetryDelayMs * Math.pow(2, this.attempts);
                },
            }).catch(function (err) {
                throw new Error("Error sending report to Engine servers: " + err);
            });
        })
            .then(function (response) {
            if (response.statusCode < 200 || response.statusCode >= 300) {
                // Note that we don't expect to see a 3xx here because request follows
                // redirects.
                throw new Error("Error sending report to Engine servers (HTTP status " + response.statusCode + "): " + response.body);
            }
            if (_this.options.debugPrintReports) {
                // tslint:disable-next-line no-console
                console.log("Engine report: status " + response.statusCode);
            }
        });
    };
    // Stop prevents reports from being sent automatically due to time or buffer
    // size, and stop buffering new traces. You may still manually send a last
    // report by calling sendReport().
    EngineReportingAgent.prototype.stop = function () {
        if (this.reportTimer) {
            clearInterval(this.reportTimer);
            this.reportTimer = undefined;
        }
    };
    EngineReportingAgent.prototype.sendReportAndReportErrors = function () {
        var _this = this;
        return this.sendReport().catch(function (err) {
            // This catch block is primarily intended to catch network errors from
            // the retried request itself, which include network errors and non-2xx
            // HTTP errors.
            if (_this.options.reportErrorFunction) {
                _this.options.reportErrorFunction(err);
            }
            else {
                console.error(err.message);
            }
        });
    };
    EngineReportingAgent.prototype.resetReport = function () {
        this.report = new apollo_engine_reporting_protobuf_1.FullTracesReport({ header: REPORT_HEADER });
        this.reportSize = 0;
    };
    return EngineReportingAgent;
}());
exports.EngineReportingAgent = EngineReportingAgent;
//# sourceMappingURL=agent.js.map