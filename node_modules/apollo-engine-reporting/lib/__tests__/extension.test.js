"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tools_1 = require("graphql-tools");
var graphql_extensions_1 = require("graphql-extensions");
var graphql_1 = require("graphql");
var node_fetch_1 = require("node-fetch");
var extension_1 = require("../extension");
test('trace construction', function () { return __awaiter(_this, void 0, void 0, function () {
    function addTrace(signature, operationName, trace) {
        traces.push({ signature: signature, operationName: operationName, trace: trace });
    }
    var typeDefs, query, schema, traces, reportingExtension, stack, requestDidEnd;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                typeDefs = "\n  type User {\n    id: Int\n    name: String\n    posts(limit: Int): [Post]\n  }\n\n  type Post {\n    id: Int\n    title: String\n    views: Int\n    author: User\n  }\n\n  type Query {\n    aString: String\n    aBoolean: Boolean\n    anInt: Int\n    author(id: Int): User\n    topPosts(limit: Int): [Post]\n  }\n";
                query = "\n    query q {\n      author(id: 5) {\n        name\n        posts(limit: 2) {\n          id\n        }\n      }\n      aBoolean\n    }\n";
                schema = graphql_tools_1.makeExecutableSchema({ typeDefs: typeDefs });
                graphql_tools_1.addMockFunctionsToSchema({ schema: schema });
                graphql_extensions_1.enableGraphQLExtensions(schema);
                traces = [];
                reportingExtension = new extension_1.EngineReportingExtension({}, addTrace);
                stack = new graphql_extensions_1.GraphQLExtensionStack([reportingExtension]);
                requestDidEnd = stack.requestDidStart({
                    request: new node_fetch_1.Request('http://localhost:123/foo'),
                    queryString: query,
                });
                return [4 /*yield*/, graphql_1.graphql({
                        schema: schema,
                        source: query,
                        contextValue: { _extensionStack: stack },
                    })];
            case 1:
                _a.sent();
                requestDidEnd();
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=extension.test.js.map