"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = require("graphql-tag");
var signature_1 = require("../signature");
// The gql duplicate fragment warning feature really is just warnings; nothing
// breaks if you turn it off in tests.
graphql_tag_1.disableFragmentWarnings();
describe('printWithReducedWhitespace', function () {
    var cases = [
        {
            name: 'lots of whitespace',
            // Note: there's a tab after "tab->", which prettier wants to keep as a
            // literal tab rather than \t.  In the output, there should be a literal
            // backslash-t.
            input: graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        query Foo($a: Int) {\n          user(\n            name: \"   tab->\tyay\"\n            other: \"\"\"\n            apple\n               bag\n            cat\n            \"\"\"\n          ) {\n            name\n          }\n        }\n      "], ["\n        query Foo($a: Int) {\n          user(\n            name: \"   tab->\tyay\"\n            other: \"\"\"\n            apple\n               bag\n            cat\n            \"\"\"\n          ) {\n            name\n          }\n        }\n      "]))),
            output: 'query Foo($a:Int){user(name:"   tab->\\tyay",other:"apple\\n   bag\\ncat"){name}}',
        },
    ];
    cases.forEach(function (_a) {
        var name = _a.name, input = _a.input, output = _a.output;
        test(name, function () {
            expect(signature_1.printWithReducedWhitespace(input)).toEqual(output);
        });
    });
});
describe('hideLiterals', function () {
    var cases = [
        {
            name: 'full test',
            input: graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n        query Foo($b: Int, $a: Boolean) {\n          user(name: \"hello\", age: 5) {\n            ...Bar\n            ... on User {\n              hello\n              bee\n            }\n            tz\n            aliased: name\n          }\n        }\n\n        fragment Bar on User {\n          age @skip(if: $a)\n          ...Nested\n        }\n\n        fragment Nested on User {\n          blah\n        }\n      "], ["\n        query Foo($b: Int, $a: Boolean) {\n          user(name: \"hello\", age: 5) {\n            ...Bar\n            ... on User {\n              hello\n              bee\n            }\n            tz\n            aliased: name\n          }\n        }\n\n        fragment Bar on User {\n          age @skip(if: $a)\n          ...Nested\n        }\n\n        fragment Nested on User {\n          blah\n        }\n      "]))),
            output: 'query Foo($b:Int,$a:Boolean){user(name:"",age:0){...Bar...on User{hello bee}tz aliased:name}}' +
                'fragment Bar on User{age@skip(if:$a)...Nested}fragment Nested on User{blah}',
        },
    ];
    cases.forEach(function (_a) {
        var name = _a.name, input = _a.input, output = _a.output;
        test(name, function () {
            expect(signature_1.printWithReducedWhitespace(signature_1.hideLiterals(input))).toEqual(output);
        });
    });
});
describe('aggressive signature', function () {
    function aggressive(ast, operationName) {
        return signature_1.printWithReducedWhitespace(signature_1.removeAliases(signature_1.hideLiterals(signature_1.sortAST(signature_1.dropUnusedDefinitions(ast, operationName)))));
    }
    var cases = [
        // Test cases borrowed from optics-agent-js.
        {
            name: 'basic test',
            operationName: '',
            input: graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n        {\n          user {\n            name\n          }\n        }\n      "], ["\n        {\n          user {\n            name\n          }\n        }\n      "]))),
            output: '{user{name}}',
        },
        {
            name: 'basic test with query',
            operationName: '',
            input: graphql_tag_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n        query {\n          user {\n            name\n          }\n        }\n      "], ["\n        query {\n          user {\n            name\n          }\n        }\n      "]))),
            output: '{user{name}}',
        },
        {
            name: 'basic with operation name',
            operationName: 'OpName',
            input: graphql_tag_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n        query OpName {\n          user {\n            name\n          }\n        }\n      "], ["\n        query OpName {\n          user {\n            name\n          }\n        }\n      "]))),
            output: 'query OpName{user{name}}',
        },
        {
            name: 'with various inline types',
            operationName: 'OpName',
            input: graphql_tag_1.default(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n        query OpName {\n          user {\n            name(apple: [[10]], cat: ENUM_VALUE, bag: { input: \"value\" })\n          }\n        }\n      "], ["\n        query OpName {\n          user {\n            name(apple: [[10]], cat: ENUM_VALUE, bag: { input: \"value\" })\n          }\n        }\n      "]))),
            output: 'query OpName{user{name(apple:[],bag:{},cat:ENUM_VALUE)}}',
        },
        {
            name: 'with various argument types',
            operationName: 'OpName',
            input: graphql_tag_1.default(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n        query OpName($c: Int!, $a: [[Boolean!]!], $b: EnumType) {\n          user {\n            name(apple: $a, cat: $c, bag: $b)\n          }\n        }\n      "], ["\n        query OpName($c: Int!, $a: [[Boolean!]!], $b: EnumType) {\n          user {\n            name(apple: $a, cat: $c, bag: $b)\n          }\n        }\n      "]))),
            output: 'query OpName($a:[[Boolean!]!],$b:EnumType,$c:Int!){user{name(apple:$a,bag:$b,cat:$c)}}',
        },
        {
            name: 'fragment',
            operationName: '',
            input: graphql_tag_1.default(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n        {\n          user {\n            name\n            ...Bar\n          }\n        }\n\n        fragment Bar on User {\n          asd\n        }\n\n        fragment Baz on User {\n          jkl\n        }\n      "], ["\n        {\n          user {\n            name\n            ...Bar\n          }\n        }\n\n        fragment Bar on User {\n          asd\n        }\n\n        fragment Baz on User {\n          jkl\n        }\n      "]))),
            output: '{user{name...Bar}}fragment Bar on User{asd}',
        },
        {
            name: 'full test',
            operationName: 'Foo',
            input: graphql_tag_1.default(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n        query Foo($b: Int, $a: Boolean) {\n          user(name: \"hello\", age: 5) {\n            ...Bar\n            ... on User {\n              hello\n              bee\n            }\n            tz\n            aliased: name\n          }\n        }\n\n        fragment Baz on User {\n          asd\n        }\n\n        fragment Bar on User {\n          age @skip(if: $a)\n          ...Nested\n        }\n\n        fragment Nested on User {\n          blah\n        }\n      "], ["\n        query Foo($b: Int, $a: Boolean) {\n          user(name: \"hello\", age: 5) {\n            ...Bar\n            ... on User {\n              hello\n              bee\n            }\n            tz\n            aliased: name\n          }\n        }\n\n        fragment Baz on User {\n          asd\n        }\n\n        fragment Bar on User {\n          age @skip(if: $a)\n          ...Nested\n        }\n\n        fragment Nested on User {\n          blah\n        }\n      "]))),
            output: 'query Foo($a:Boolean,$b:Int){user(age:0,name:""){name tz...Bar...on User{bee hello}}}' +
                'fragment Bar on User{age@skip(if:$a)...Nested}fragment Nested on User{blah}',
        },
    ];
    cases.forEach(function (_a) {
        var name = _a.name, operationName = _a.operationName, input = _a.input, output = _a.output;
        test(name, function () {
            expect(aggressive(input, operationName)).toEqual(output);
        });
    });
});
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9;
//# sourceMappingURL=signature.test.js.map