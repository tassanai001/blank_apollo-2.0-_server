import { HTTPCache } from './HTTPCache';
export declare type RequestOptions = RequestInit & {
    params?: URLSearchParamsInit;
    body: Body;
};
export declare type Body = BodyInit | object;
export declare abstract class RESTDataSource<TContext = any> {
    abstract baseURL: string;
    httpCache: HTTPCache;
    context: TContext;
    protected willSendRequest?(request: Request): void;
    protected didReceiveErrorResponse<TResult = any>(response: Response): Promise<TResult>;
    protected get<TResult = any>(path: string, params?: URLSearchParamsInit, options?: RequestOptions): Promise<TResult>;
    protected post<TResult = any>(path: string, body?: Body, options?: RequestOptions): Promise<TResult>;
    protected patch<TResult = any>(path: string, body?: Body, options?: RequestOptions): Promise<TResult>;
    protected put<TResult = any>(path: string, body?: Body, options?: RequestOptions): Promise<TResult>;
    protected delete<TResult = any>(path: string, params?: URLSearchParamsInit, options?: RequestOptions): Promise<TResult>;
    private fetch;
    private trace;
}
//# sourceMappingURL=RESTDataSource.d.ts.map